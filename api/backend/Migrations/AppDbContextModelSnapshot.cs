// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using TheFirmApi.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheFirmApi.Entities.AnalyticsEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("event_name");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("metadata");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("occurred_at");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("session_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("analytics_event", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.AnalyticsSessionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ended_at");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("started_at");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserRun")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("user_run");

                    b.HasKey("Id");

                    b.HasIndex("UserRun");

                    b.ToTable("analytics_session", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.CalendarEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("date_start");

                    b.Property<int>("InternalEventId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("internal_event_id");

                    b.Property<string>("LogoIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("logo_irid");

                    b.HasKey("Id");

                    b.HasIndex("InternalEventId")
                        .IsUnique();

                    b.ToTable("calendar_event", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("banner_irid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyRun")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("company_run");

                    b.Property<int?>("ContactDirCounty")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("contact_dir_county");

                    b.Property<string>("ContactDirInNumber")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_dir_in_number");

                    b.Property<string>("ContactDirStNumber")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_dir_st_number");

                    b.Property<int?>("ContactDirStates")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("contact_dir_states");

                    b.Property<string>("ContactDirStreet1")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_dir_street_1");

                    b.Property<string>("ContactDirStreet2")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_dir_street_2");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("ContactRut")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_rut");

                    b.Property<string>("ContactSurname")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("contact_surname");

                    b.Property<string>("HtmlIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("html_irid");

                    b.Property<string>("LogoIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("logo_irid");

                    b.HasKey("Id");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.CouponEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("description");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("DECIMAL(18, 2)")
                        .HasColumnName("discount_value");

                    b.Property<int?>("EventId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("event_id");

                    b.Property<int>("UsageCount")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("usage_count");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("usage_limit");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("coupon", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.CouponUsageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("coupon_id");

                    b.Property<int?>("TicketId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_id");

                    b.Property<int>("TicketOrderId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_order_id");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("used_at");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("TicketOrderId");

                    b.ToTable("coupon_usage", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("banner_irid");

                    b.Property<int>("CompanyId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("company");

                    b.Property<string>("CssIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("css_irid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("end_date");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("event_description");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("event_name");

                    b.Property<string>("LogoIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("logo_irid");

                    b.Property<bool>("Public")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("public");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("start_date");

                    b.Property<string>("TemplateIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("template_irid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketBoughtEntity", b =>
                {
                    b.Property<string>("UserRun")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("user_run");

                    b.Property<int>("TierId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("tier_id");

                    b.Property<DateTime>("BoughtAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("bought_at");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("ticket_status");

                    b.HasKey("UserRun", "TierId");

                    b.HasIndex("TierId");

                    b.ToTable("ticket_bought", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketOrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("order_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("payment_reference");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("DECIMAL(18, 2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("UserRun")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("user_run");

                    b.HasKey("Id");

                    b.HasIndex("UserRun");

                    b.ToTable("ticket_order", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketOrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PricePerTicket")
                        .HasColumnType("DECIMAL(18, 2)")
                        .HasColumnName("price_per_ticket");

                    b.Property<int>("Quantity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("quantity");

                    b.Property<int>("TierId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("tier_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TierId");

                    b.ToTable("ticket_order_item", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketTierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("DECIMAL(18, 2)")
                        .HasColumnName("base_price");

                    b.Property<DateTime?>("EntryAllowedFrom")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("entry_allowed_from");

                    b.Property<DateTime?>("EntryAllowedTo")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("entry_allowed_to");

                    b.Property<int>("EventId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("event");

                    b.Property<bool>("SingleDaily")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("single_daily");

                    b.Property<bool>("SingleUse")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("single_use");

                    b.Property<int>("StockCurrent")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("stock_current");

                    b.Property<int>("StockInitial")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("stock_initial");

                    b.Property<int>("StockSold")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("stock_sold");

                    b.Property<string>("TierMailTemplateIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("tier_mail_template_irid");

                    b.Property<string>("TierName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("tier_name");

                    b.Property<string>("TierPdfTemplateIrid")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("tier_pdf_template_irid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("ticket_tier", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.UserAdminCompanyEntity", b =>
                {
                    b.Property<string>("UserRun")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("user_run");

                    b.Property<int>("CompanyId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("company");

                    b.HasKey("UserRun", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("user_admin_company", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.UserEntity", b =>
                {
                    b.Property<string>("Run")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("run");

                    b.Property<int?>("DirCounty")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("dir_county");

                    b.Property<string>("DirInNumber")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("dir_in_number");

                    b.Property<string>("DirStNumber")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("dir_st_number");

                    b.Property<int?>("DirStates")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("dir_states");

                    b.Property<string>("DirStreet1")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("dir_street_1");

                    b.Property<string>("DirStreet2")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("dir_street_2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("email");

                    b.Property<string>("FirstNames")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("first_names");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("last_names");

                    b.Property<bool>("Notify")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("notify");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("phone");

                    b.HasKey("Run");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.UserModCompanyEntity", b =>
                {
                    b.Property<string>("UserRun")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("user_run");

                    b.Property<int>("CompanyId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("company");

                    b.HasKey("UserRun", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("user_mod_company", (string)null);
                });

            modelBuilder.Entity("TheFirmApi.Entities.AnalyticsEventEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.AnalyticsSessionEntity", "Session")
                        .WithMany("Events")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TheFirmApi.Entities.AnalyticsSessionEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.UserEntity", "User")
                        .WithMany("AnalyticsSessions")
                        .HasForeignKey("UserRun")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheFirmApi.Entities.CalendarEventEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.EventEntity", "Event")
                        .WithOne("CalendarEvent")
                        .HasForeignKey("TheFirmApi.Entities.CalendarEventEntity", "InternalEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TheFirmApi.Entities.CouponEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.EventEntity", "Event")
                        .WithMany("Coupons")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TheFirmApi.Entities.CouponUsageEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.CouponEntity", "Coupon")
                        .WithMany("Usages")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheFirmApi.Entities.TicketOrderEntity", "Order")
                        .WithMany("CouponUsages")
                        .HasForeignKey("TicketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TheFirmApi.Entities.EventEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.CompanyEntity", "Company")
                        .WithMany("Events")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketBoughtEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.TicketTierEntity", "Tier")
                        .WithMany("TicketsBought")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheFirmApi.Entities.UserEntity", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserRun")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketOrderEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserRun")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketOrderItemEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.TicketOrderEntity", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheFirmApi.Entities.TicketTierEntity", "Tier")
                        .WithMany("OrderItems")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketTierEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.EventEntity", "Event")
                        .WithMany("TicketTiers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TheFirmApi.Entities.UserAdminCompanyEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.CompanyEntity", "Company")
                        .WithMany("Admins")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheFirmApi.Entities.UserEntity", "User")
                        .WithMany("AdminCompanies")
                        .HasForeignKey("UserRun")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheFirmApi.Entities.UserModCompanyEntity", b =>
                {
                    b.HasOne("TheFirmApi.Entities.CompanyEntity", "Company")
                        .WithMany("Moderators")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheFirmApi.Entities.UserEntity", "User")
                        .WithMany("ModeratedCompanies")
                        .HasForeignKey("UserRun")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheFirmApi.Entities.AnalyticsSessionEntity", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TheFirmApi.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Events");

                    b.Navigation("Moderators");
                });

            modelBuilder.Entity("TheFirmApi.Entities.CouponEntity", b =>
                {
                    b.Navigation("Usages");
                });

            modelBuilder.Entity("TheFirmApi.Entities.EventEntity", b =>
                {
                    b.Navigation("CalendarEvent");

                    b.Navigation("Coupons");

                    b.Navigation("TicketTiers");
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketOrderEntity", b =>
                {
                    b.Navigation("CouponUsages");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("TheFirmApi.Entities.TicketTierEntity", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("TicketsBought");
                });

            modelBuilder.Entity("TheFirmApi.Entities.UserEntity", b =>
                {
                    b.Navigation("AdminCompanies");

                    b.Navigation("AnalyticsSessions");

                    b.Navigation("ModeratedCompanies");

                    b.Navigation("Orders");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}

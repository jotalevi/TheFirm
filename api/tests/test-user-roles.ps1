# Script para probar endpoints de gesti√≥n de roles de usuario
$baseUrl = "http://localhost:5000"
$loginUrl = "$baseUrl/auth/login"

# Credenciales del admin
$loginData = @{
    run = "12345678-9"
    password = "password!"
} | ConvertTo-Json

Write-Host "üîê Iniciando sesi√≥n..." -ForegroundColor Yellow
try {
    $loginResponse = Invoke-RestMethod -Uri $loginUrl -Method POST -Body $loginData -ContentType "application/json"
    $token = $loginResponse.token
    Write-Host "‚úÖ Login exitoso" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error en login: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Headers con token
$headers = @{
    "Authorization" = "Bearer $token"
    "Content-Type" = "application/json"
}

# Obtener usuarios
Write-Host "`nüë• Obteniendo usuarios..." -ForegroundColor Yellow
try {
    $usersResponse = Invoke-RestMethod -Uri "$baseUrl/users" -Method GET -Headers $headers
    Write-Host "‚úÖ Usuarios obtenidos: $($usersResponse.Count) usuarios" -ForegroundColor Green
    
    if ($usersResponse.Count -eq 0) {
        Write-Host "‚ùå No hay usuarios disponibles." -ForegroundColor Red
        exit 1
    }
    
    $firstUser = $usersResponse[0]
    $userRun = $firstUser.run
    Write-Host "üìã Usando usuario: $($firstUser.firstNames) $($firstUser.lastNames) (RUN: $userRun)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Error obteniendo usuarios: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Obtener empresas para moderaci√≥n
Write-Host "`nüè¢ Obteniendo empresas..." -ForegroundColor Yellow
try {
    $companiesResponse = Invoke-RestMethod -Uri "$baseUrl/companies" -Method GET -Headers $headers
    Write-Host "‚úÖ Empresas obtenidas: $($companiesResponse.Count) empresas" -ForegroundColor Green
    
    if ($companiesResponse.Count -eq 0) {
        Write-Host "‚ùå No hay empresas disponibles." -ForegroundColor Red
        exit 1
    }
    
    $firstCompany = $companiesResponse[0]
    $companyId = $firstCompany.id
    Write-Host "üìã Usando empresa: $($firstCompany.companyName) (ID: $companyId)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Error obteniendo empresas: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Obtener empresas moderadas del usuario
Write-Host "`nüîç Obteniendo empresas moderadas del usuario..." -ForegroundColor Yellow
try {
    $moderatedCompaniesResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun/companies-moderated" -Method GET -Headers $headers
    Write-Host "‚úÖ Empresas moderadas obtenidas: $($moderatedCompaniesResponse.Count) empresas" -ForegroundColor Green
    
    foreach ($companyId in $moderatedCompaniesResponse) {
        Write-Host "  - Empresa ID: $companyId" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Error obteniendo empresas moderadas: $($_.Exception.Message)" -ForegroundColor Red
}

# Probar hacer admin al usuario
Write-Host "`nüëë Probando hacer admin al usuario..." -ForegroundColor Yellow
try {
    $setAdminResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun/admin" -Method PUT -Body "true" -Headers $headers
    Write-Host "‚úÖ Usuario hecho admin exitosamente" -ForegroundColor Green
    Write-Host "  Mensaje: $($setAdminResponse.message)" -ForegroundColor White
} catch {
    Write-Host "‚ùå Error haciendo admin al usuario: $($_.Exception.Message)" -ForegroundColor Red
}

# Probar agregar moderaci√≥n de empresa
Write-Host "`n‚ûï Probando agregar moderaci√≥n de empresa..." -ForegroundColor Yellow
try {
    $addModResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun/moderate-company/$companyId" -Method POST -Headers $headers
    Write-Host "‚úÖ Moderaci√≥n de empresa agregada exitosamente" -ForegroundColor Green
    Write-Host "  Mensaje: $($addModResponse.message)" -ForegroundColor White
} catch {
    Write-Host "‚ùå Error agregando moderaci√≥n de empresa: $($_.Exception.Message)" -ForegroundColor Red
}

# Verificar empresas moderadas actualizadas
Write-Host "`nüîç Verificando empresas moderadas actualizadas..." -ForegroundColor Yellow
try {
    $updatedModeratedCompaniesResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun/companies-moderated" -Method GET -Headers $headers
    Write-Host "‚úÖ Empresas moderadas actualizadas: $($updatedModeratedCompaniesResponse.Count) empresas" -ForegroundColor Green
    
    foreach ($companyId in $updatedModeratedCompaniesResponse) {
        Write-Host "  - Empresa ID: $companyId" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Error obteniendo empresas moderadas actualizadas: $($_.Exception.Message)" -ForegroundColor Red
}

# Probar quitar moderaci√≥n de empresa
Write-Host "`n‚ûñ Probando quitar moderaci√≥n de empresa..." -ForegroundColor Yellow
try {
    $removeModResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun/moderate-company/$companyId" -Method DELETE -Headers $headers
    Write-Host "‚úÖ Moderaci√≥n de empresa removida exitosamente" -ForegroundColor Green
    Write-Host "  Mensaje: $($removeModResponse.message)" -ForegroundColor White
} catch {
    Write-Host "‚ùå Error removiendo moderaci√≥n de empresa: $($_.Exception.Message)" -ForegroundColor Red
}

# Probar quitar admin al usuario
Write-Host "`nüë§ Probando quitar admin al usuario..." -ForegroundColor Yellow
try {
    $removeAdminResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun/admin" -Method PUT -Body "false" -Headers $headers
    Write-Host "‚úÖ Admin removido exitosamente" -ForegroundColor Green
    Write-Host "  Mensaje: $($removeAdminResponse.message)" -ForegroundColor White
} catch {
    Write-Host "‚ùå Error removiendo admin al usuario: $($_.Exception.Message)" -ForegroundColor Red
}

# Verificar estado final
Write-Host "`nüîç Verificando estado final..." -ForegroundColor Yellow
try {
    $finalUserResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun" -Method GET -Headers $headers
    Write-Host "‚úÖ Estado final del usuario:" -ForegroundColor Green
    Write-Host "  Nombre: $($finalUserResponse.firstNames) $($finalUserResponse.lastNames)" -ForegroundColor White
    Write-Host "  Email: $($finalUserResponse.email)" -ForegroundColor White
    Write-Host "  Es Admin: $($finalUserResponse.isAdmin)" -ForegroundColor White
    
    $finalModeratedCompaniesResponse = Invoke-RestMethod -Uri "$baseUrl/users/$userRun/companies-moderated" -Method GET -Headers $headers
    Write-Host "  Empresas moderadas: $($finalModeratedCompaniesResponse.Count)" -ForegroundColor White
} catch {
    Write-Host "‚ùå Error verificando estado final: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n‚úÖ Pruebas de gesti√≥n de roles de usuario completadas" -ForegroundColor Green 